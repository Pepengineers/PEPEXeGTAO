#pragma kernel Composite
#pragma multi_compile_local _ XE_GTAO_COMPUTE_BENT_NORMALS

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "XeGTAOCommon.hlsl"

Texture2D<uint> _GTAOTerm : register(t0);
RWTexture2D<lpfloat> _AOFinal : register(u0);
float4 _GTAOResolutionScale;
float _Intensity;

float4 R8G8B8A8_UNORM_to_FLOAT4(uint packedInput)
{
    float4 unpackedOutput;
    unpackedOutput.x = (float)(packedInput & 0x000000ff) / 255;
    unpackedOutput.y = (float)(((packedInput >> 8) & 0x000000ff)) / 255;
    unpackedOutput.z = (float)(((packedInput >> 16) & 0x000000ff)) / 255;
    unpackedOutput.w = (float)(packedInput >> 24) / 255;
    return unpackedOutput;
}

void DecodeVisibilityBentNormal(const uint packedValue, out float visibility, out float3 bentNormal)
{
    float4 decoded = R8G8B8A8_UNORM_to_FLOAT4(packedValue);
    bentNormal = decoded.xyz * 2.0 - 1.0; // could normalize - don't want to since it's done so many times, better to do it at the final step only
    visibility = decoded.w;
}

float3 NormalVS_XeGTAOToUnity(float3 normalVS)
{
    normalVS.yz *= -1;
    return normalVS;
}

// Engine-specific entry point for the first pass
[numthreads(XE_GTAO_NUMTHREADS_X, XE_GTAO_NUMTHREADS_Y, 1)]
// <- hard coded to 8x8; each thread computes 2x2 blocks so processing 16x16 block: Dispatch needs to be called with (width + 16-1) / 16, (height + 16-1) / 16
void Composite(const uint2 dispatchThreadID : SV_DispatchThreadID)
{
    const uint2 pixelCoords = dispatchThreadID.xy;
    const uint packedValue = LOAD_TEXTURE2D(_GTAOTerm, pixelCoords * _GTAOResolutionScale.xy).r;

    float visibility = 1.0f;
    float3 bentNormalWS = 1;
    #if XE_GTAO_COMPUTE_BENT_NORMALS
    DecodeVisibilityBentNormal(packedValue, visibility, bentNormalWS);
    // bentNormalWS = NormalVS_XeGTAOToUnity(bentNormalWS);
    // bentNormalWS = TransformViewToWorldNormal(bentNormalWS, true);
    // bentNormalWS = normalize(lerp(bentNormalWS, normalWS, visibility * visibility));
    #else
    visibility = packedValue / 255.05;
    #endif
    visibility = saturate(pow(visibility, _Intensity));
    _AOFinal[pixelCoords] = visibility;
}
